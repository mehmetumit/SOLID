{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SOLID Daha iyi bir nesneye y\u00f6nelik tasar\u0131m i\u00e7in SOLID tasar\u0131m prensipleri SingleResponsibility OpenClosed LiskovSubstitution InterfaceSegregation DependencyInversion","title":"SOLID"},{"location":"#solid","text":"Daha iyi bir nesneye y\u00f6nelik tasar\u0131m i\u00e7in SOLID tasar\u0131m prensipleri SingleResponsibility OpenClosed LiskovSubstitution InterfaceSegregation DependencyInversion","title":"SOLID"},{"location":"DependencyInversion/D/","text":"Dependency Inversion Principle S\u0131n\u0131flar aras\u0131ndaki ba\u011f\u0131ml\u0131l\u0131klar\u0131n azalt\u0131lmas\u0131 ve bu ba\u011f\u0131ml\u0131l\u0131klar\u0131n \"interface\"ler ile sa\u011flanmas\u0131 gerekmektedir. Bu sayede y\u00fcksek seviyeli mod\u00fcller d\u00fc\u015f\u00fck seviyeli mod\u00fcllere ba\u011f\u0131ml\u0131 olmayacakt\u0131r. Hatal\u0131 \u00d6rnek class CustomerDAO{ } class CustomerManager{ //Data access katman\u0131nda meydana gelen herhangi bir de\u011fi\u015fiklik Manager s\u0131n\u0131f\u0131m\u0131za da etki edecektir. CustomarDAO customerDAO;\u274c void addCustomer(){ customerDAO.add(); } void removeCustomer(){ customerDAO.remove(); } void updateCustomer(){ customerDAO.update(); } } D\u00fczeltilmi\u015f \u00d6rnek interface CustomerDAO{ } class CustomerDAOImpl implements CustomerDAO{ } class CustomerManager{ CustomarDAO customerDAO;\u2705//Alt s\u0131n\u0131fa ba\u011f\u0131ml\u0131l\u0131k interface yard\u0131m\u0131yla ortadan kalkt\u0131 void addCustomer(){ customerDAO.add(); } void removeCustomer(){ customerDAO.remove(); } void updateCustomer(){ customerDAO.update(); } }","title":"Dependency Inversion Principle"},{"location":"DependencyInversion/D/#dependency-inversion-principle","text":"S\u0131n\u0131flar aras\u0131ndaki ba\u011f\u0131ml\u0131l\u0131klar\u0131n azalt\u0131lmas\u0131 ve bu ba\u011f\u0131ml\u0131l\u0131klar\u0131n \"interface\"ler ile sa\u011flanmas\u0131 gerekmektedir. Bu sayede y\u00fcksek seviyeli mod\u00fcller d\u00fc\u015f\u00fck seviyeli mod\u00fcllere ba\u011f\u0131ml\u0131 olmayacakt\u0131r.","title":"Dependency Inversion Principle"},{"location":"DependencyInversion/D/#hatal-ornek","text":"class CustomerDAO{ } class CustomerManager{ //Data access katman\u0131nda meydana gelen herhangi bir de\u011fi\u015fiklik Manager s\u0131n\u0131f\u0131m\u0131za da etki edecektir. CustomarDAO customerDAO;\u274c void addCustomer(){ customerDAO.add(); } void removeCustomer(){ customerDAO.remove(); } void updateCustomer(){ customerDAO.update(); } }","title":"Hatal\u0131 \u00d6rnek"},{"location":"DependencyInversion/D/#duzeltilmis-ornek","text":"interface CustomerDAO{ } class CustomerDAOImpl implements CustomerDAO{ } class CustomerManager{ CustomarDAO customerDAO;\u2705//Alt s\u0131n\u0131fa ba\u011f\u0131ml\u0131l\u0131k interface yard\u0131m\u0131yla ortadan kalkt\u0131 void addCustomer(){ customerDAO.add(); } void removeCustomer(){ customerDAO.remove(); } void updateCustomer(){ customerDAO.update(); } }","title":"D\u00fczeltilmi\u015f \u00d6rnek"},{"location":"InterfaceSegregation/I/","text":"Interface Segregation Principle S\u0131n\u0131flar kullanmak istedi\u011fi \"interface\"ler i\u00e7in kullanmayacaklar\u0131 metotlar\u0131 implementasyona zorlanmamal\u0131d\u0131r. Hatal\u0131 \u00d6rnek interface Payment { void payTheBills();\u274c void getPaymentMethod();\u2705 void makePayment();\u2705 } class Order implements Payment{ int id; Date orderDate; @Override void payTheBills(){\u274c //Bu s\u0131n\u0131fta kullan\u0131lmayacak } @Override void getPaymentMethod(){\u2705 //Logic } @Override void makePayment(){\u2705 //Logic } } D\u00fczeltilmi\u015f \u00d6rnek interface Payment { void getPaymentMethod(); void makePayment(); } interface Bill{ void payTheBills(); } class Order implements Payment{ int id; Date orderDate; @Override void getPaymentMethod(){ //Logic } @Override void makePayment(){ //Logic } }","title":"Interface Segregation Principle"},{"location":"InterfaceSegregation/I/#interface-segregation-principle","text":"S\u0131n\u0131flar kullanmak istedi\u011fi \"interface\"ler i\u00e7in kullanmayacaklar\u0131 metotlar\u0131 implementasyona zorlanmamal\u0131d\u0131r.","title":"Interface Segregation Principle"},{"location":"InterfaceSegregation/I/#hatal-ornek","text":"interface Payment { void payTheBills();\u274c void getPaymentMethod();\u2705 void makePayment();\u2705 } class Order implements Payment{ int id; Date orderDate; @Override void payTheBills(){\u274c //Bu s\u0131n\u0131fta kullan\u0131lmayacak } @Override void getPaymentMethod(){\u2705 //Logic } @Override void makePayment(){\u2705 //Logic } }","title":"Hatal\u0131 \u00d6rnek"},{"location":"InterfaceSegregation/I/#duzeltilmis-ornek","text":"interface Payment { void getPaymentMethod(); void makePayment(); } interface Bill{ void payTheBills(); } class Order implements Payment{ int id; Date orderDate; @Override void getPaymentMethod(){ //Logic } @Override void makePayment(){ //Logic } }","title":"D\u00fczeltilmi\u015f \u00d6rnek"},{"location":"LiskovSubstitution/L/","text":"Liskov Substitution Principle Herhangi bir i\u015flevsel kod blo\u011fu kulland\u0131\u011f\u0131 objenin ger\u00e7ek tipini bilmeden i\u015flem yapabilmelidir. Hatal\u0131 \u00d6rnek class Car{ void drive(); } class Airplane{ void fly(); } class Engine{ void startEngine(Object vehicle){ if(vehicle instanceof Car car){ car.drive(); }else if(vehicle instanceof Airplane airplane){ airplane.fly(); } } } D\u00fczeltilmi\u015f \u00d6rnek interface Vehicle{ void start(); } class Car implements Vehicle{ void drive(); void start(){ drive(); } } class Airplane implements Vehicle{ void fly(); void start(){ fly(); } } class Engine{ void startEngine(Vehicle vehicle){ vehicle.start(); } }","title":"Liskov Substitution Principle"},{"location":"LiskovSubstitution/L/#liskov-substitution-principle","text":"Herhangi bir i\u015flevsel kod blo\u011fu kulland\u0131\u011f\u0131 objenin ger\u00e7ek tipini bilmeden i\u015flem yapabilmelidir.","title":"Liskov Substitution Principle"},{"location":"LiskovSubstitution/L/#hatal-ornek","text":"class Car{ void drive(); } class Airplane{ void fly(); } class Engine{ void startEngine(Object vehicle){ if(vehicle instanceof Car car){ car.drive(); }else if(vehicle instanceof Airplane airplane){ airplane.fly(); } } }","title":"Hatal\u0131 \u00d6rnek"},{"location":"LiskovSubstitution/L/#duzeltilmis-ornek","text":"interface Vehicle{ void start(); } class Car implements Vehicle{ void drive(); void start(){ drive(); } } class Airplane implements Vehicle{ void fly(); void start(){ fly(); } } class Engine{ void startEngine(Vehicle vehicle){ vehicle.start(); } }","title":"D\u00fczeltilmi\u015f \u00d6rnek"},{"location":"OpenClosed/O/","text":"Open Closed Principle Herhangi bir i\u015flevsel kod blo\u011fu yapt\u0131\u011f\u0131 i\u015f yetersiz kal\u0131nca yeni eklenecek \u00f6zellikler i\u00e7in mevcut yap\u0131y\u0131 koruyarak d\u00fczenleme yap\u0131lmal\u0131d\u0131r. Mevcut durum class Vehicle{ void start(); } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); } Yeni Ara\u00e7 Eklenmek \u0130steniyor class Airplane{ } Hatal\u0131 \u00d6rnek class Vehicle{ void start(){ //Vehicle start } } class Airplane extends Vehicle{ @Override void start(){ //Airplane start } } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); } Geni\u015fletilmeye a\u00e7\u0131k oldu\u011fu i\u00e7in \"Open\" b\u00f6l\u00fcm\u00fcn\u00fc sa\u011flar fakat \"start\" methodu modifikasyona kapal\u0131 olmad\u0131\u011f\u0131 i\u00e7in \"Closed\" b\u00f6l\u00fcm\u00fcn\u00fc sa\u011flamaz. \u0130leride beklenmeyen sonu\u00e7lara yol a\u00e7abilir. D\u00fczeltilmi\u015f \u00d6rnek class Vehicle{ //Final ile prensibin \"Closed\" k\u0131sm\u0131n\u0131 sa\u011flad\u0131k final void start(){ vehicleStart(); } void vehicleStart(){ //Start vehicle } } class Airplane extends Vehicle{ //Start methodu Override edilemez //Eklenti yap\u0131larak prensibin \"Open\" k\u0131sm\u0131 sa\u011fland\u0131 void vehicleStart(){ //Start airplane } } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); }","title":"Open Closed Principle"},{"location":"OpenClosed/O/#open-closed-principle","text":"Herhangi bir i\u015flevsel kod blo\u011fu yapt\u0131\u011f\u0131 i\u015f yetersiz kal\u0131nca yeni eklenecek \u00f6zellikler i\u00e7in mevcut yap\u0131y\u0131 koruyarak d\u00fczenleme yap\u0131lmal\u0131d\u0131r.","title":"Open Closed Principle"},{"location":"OpenClosed/O/#mevcut-durum","text":"class Vehicle{ void start(); } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); } Yeni Ara\u00e7 Eklenmek \u0130steniyor class Airplane{ }","title":"Mevcut durum"},{"location":"OpenClosed/O/#hatal-ornek","text":"class Vehicle{ void start(){ //Vehicle start } } class Airplane extends Vehicle{ @Override void start(){ //Airplane start } } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); } Geni\u015fletilmeye a\u00e7\u0131k oldu\u011fu i\u00e7in \"Open\" b\u00f6l\u00fcm\u00fcn\u00fc sa\u011flar fakat \"start\" methodu modifikasyona kapal\u0131 olmad\u0131\u011f\u0131 i\u00e7in \"Closed\" b\u00f6l\u00fcm\u00fcn\u00fc sa\u011flamaz. \u0130leride beklenmeyen sonu\u00e7lara yol a\u00e7abilir.","title":"Hatal\u0131 \u00d6rnek"},{"location":"OpenClosed/O/#duzeltilmis-ornek","text":"class Vehicle{ //Final ile prensibin \"Closed\" k\u0131sm\u0131n\u0131 sa\u011flad\u0131k final void start(){ vehicleStart(); } void vehicleStart(){ //Start vehicle } } class Airplane extends Vehicle{ //Start methodu Override edilemez //Eklenti yap\u0131larak prensibin \"Open\" k\u0131sm\u0131 sa\u011fland\u0131 void vehicleStart(){ //Start airplane } } class Engine{ Vehicle vehicle; void startEngine(){ vehicle.start(); } setVehicle(Vehicle vehicle); }","title":"D\u00fczeltilmi\u015f \u00d6rnek"},{"location":"SingleResponsibility/S/","text":"Single Responsibility Principle Her s\u0131n\u0131f sadece tek bir i\u015fi ger\u00e7ekle\u015ftirmeli. Bu \u015fekilde yap\u0131ld\u0131\u011f\u0131nda hatalar\u0131n ortaya \u00e7\u0131kma ihtimali azalt\u0131lm\u0131\u015f olur. Hatal\u0131 \u00d6rnek class Order{ int id; Date orderDate; int getId();//\u2705 setId(int id);//\u2705 addOrder();//\u2705 getOrderDate();//\u2705 setOrderDate();//\u2705 sendOrderMail(){ // \u274cEkstra fonksiyonellik try{ //Logic } catch(Exception ex){ handleLogs; } } handleLogs(); // \u274cEkstra fonksiyonellik } D\u00fczeltilmi\u015f \u00d6rnek S\u0131n\u0131f\u0131n sahip oldu\u011fu ekstra fonksiyonellik, yeni s\u0131n\u0131flara da\u011f\u0131t\u0131larak ileride ya\u015fanabilecek hatalar\u0131n olu\u015fma ihtimali azalt\u0131ld\u0131. class MailSender{ void sendEmail(String emailData); } class LogHandler{ void error(String err); void info(String inf); void debug(String deb); } class Order{ int id; Date orderDate; LogHandler logHandler; int getId(); setId(int id); addOrder(){ try{ MailSender mailSender = new MailSender(); String emailData; mailSender.sendEmail(emailData); }catch(Exception ex){ logHandler.error(ex); } } getOrderDate(); setOrderDate(); }","title":"Single Responsibility Principle"},{"location":"SingleResponsibility/S/#single-responsibility-principle","text":"Her s\u0131n\u0131f sadece tek bir i\u015fi ger\u00e7ekle\u015ftirmeli. Bu \u015fekilde yap\u0131ld\u0131\u011f\u0131nda hatalar\u0131n ortaya \u00e7\u0131kma ihtimali azalt\u0131lm\u0131\u015f olur.","title":"Single Responsibility Principle"},{"location":"SingleResponsibility/S/#hatal-ornek","text":"class Order{ int id; Date orderDate; int getId();//\u2705 setId(int id);//\u2705 addOrder();//\u2705 getOrderDate();//\u2705 setOrderDate();//\u2705 sendOrderMail(){ // \u274cEkstra fonksiyonellik try{ //Logic } catch(Exception ex){ handleLogs; } } handleLogs(); // \u274cEkstra fonksiyonellik }","title":"Hatal\u0131 \u00d6rnek"},{"location":"SingleResponsibility/S/#duzeltilmis-ornek","text":"S\u0131n\u0131f\u0131n sahip oldu\u011fu ekstra fonksiyonellik, yeni s\u0131n\u0131flara da\u011f\u0131t\u0131larak ileride ya\u015fanabilecek hatalar\u0131n olu\u015fma ihtimali azalt\u0131ld\u0131. class MailSender{ void sendEmail(String emailData); } class LogHandler{ void error(String err); void info(String inf); void debug(String deb); } class Order{ int id; Date orderDate; LogHandler logHandler; int getId(); setId(int id); addOrder(){ try{ MailSender mailSender = new MailSender(); String emailData; mailSender.sendEmail(emailData); }catch(Exception ex){ logHandler.error(ex); } } getOrderDate(); setOrderDate(); }","title":"D\u00fczeltilmi\u015f \u00d6rnek"}]}